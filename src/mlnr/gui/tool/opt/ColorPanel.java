/*
 * ColorPanel.java
 *
 * Created on September 20, 2006, 12:55 PM
 */

package mlnr.gui.tool.opt;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.prefs.Preferences;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import mlnr.draw.Vertex;
import mlnr.util.ColorSave;
import mlnr.util.InterfaceSettings;

/**
 *
 * @author  Robert Molnar II
 */
public class ColorPanel extends javax.swing.JPanel {
        
    // <editor-fold defaultstate="collapsed" desc=" Static Fields ">
    
    /** Number of preset colors. If this changes then the static initialize needs to be changed. */
    public static final int PRESETCOLOR_SIZE = 15;
    
    /** This is the list of preset colors. */
    static Color []presetArray = new Color[PRESETCOLOR_SIZE];
    
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Static initialize of colors ">
    
    static {
        presetArray[0] =  new Color(0, 0, 0);    
        presetArray[1] =  new Color(255, 0, 0);    
        presetArray[2] =  new Color(0, 255, 0);    
        presetArray[3] =  new Color(0, 0, 255);    
        presetArray[4] =  new Color(255, 255, 0);    
        presetArray[5] =  new Color(0, 255, 255);    
        presetArray[6] =  new Color(255, 0, 255);    
        presetArray[7] =  new Color(120, 0, 0);    
        presetArray[8] =  new Color(0, 120, 0);    
        presetArray[9] =  new Color(0, 0, 120);    
        presetArray[10] =  new Color(0, 120, 50);    
        presetArray[11] =  new Color(120, 0, 50);    
        presetArray[12] =  new Color(50, 50, 50);    
        presetArray[13] =  new Color(120, 120, 120);    
        presetArray[14] =  new Color(255, 255, 255);    
        
        // Load the preset color settings.
        new PresetColorSettings().load();
    }
    
    // </editor-fold>    
    
    // <editor-fold defaultstate="collapsed" desc=" Fields ">
    
    Color currColor = Color.BLUE;
    ColorPreview cPreview;
    ColorPreSet cPreset;
    
    // </editor-fold>
    
    /** Creates new form ColorPanel */
    public ColorPanel() {
        initComponents();
        
        cPreview = new ColorPreview();
        cPreset = new ColorPreSet();
        
        jPanelPresets.add(cPreset);
        jPanelPreviewColor.add(cPreview);
        jPanelColorArray.add(new ColorPicker());
        setCurrentColor(presetArray[0]);
        updateUI();
    }
    
    /** @return the current color.
     */
    public Color getCurrentColor() {
        return currColor;
    }
    
    /** @param color the color to set the current color.
     */
    public void setCurrentColor(Color color) {
        currColor = color;
        jLabelColorValue.setText("R: " + currColor.getRed() + " G: " + currColor.getGreen() + " B: " + currColor.getBlue());
        cPreview.repaint();
    }
    
    /** This will update one of the preset colors.
     * @param index is the index of the preset array.
     * @param color is the color to change the present array.
     */
    void updatePresetColor(int index, Color color) {
        presetArray[index] = color;
        new PresetColorSettings().save();        
        cPreset.repaint();               
        
        // Update the current color.
        setCurrentColor(color);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanelPreviewColor = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanelColorArray = new javax.swing.JPanel();
        jLabelColorValue = new javax.swing.JLabel();
        jPanelPresets = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Color Options"));
        jPanelPreviewColor.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Color:");

        jPanelColorArray.setLayout(new java.awt.BorderLayout());

        jLabelColorValue.setText("jLabel2");

        jPanelPresets.setLayout(new java.awt.BorderLayout());

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .add(30, 30, 30)
                .add(jPanelPreviewColor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(jLabelColorValue, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addContainerGap())
            .add(jPanelPresets, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
            .add(jPanelColorArray, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jPanelPreviewColor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelColorValue)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelPresets, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelColorArray, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 223, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelColorValue;
    private javax.swing.JPanel jPanelColorArray;
    private javax.swing.JPanel jPanelPresets;
    private javax.swing.JPanel jPanelPreviewColor;
    // End of variables declaration//GEN-END:variables
    
        
    // <editor-fold defaultstate="collapsed" desc=" Class ColorPreSet ">
    
    class ColorPreSet extends JComponent implements MouseListener {
        ColorPreSet() {
            setPreferredSize(new Dimension(jPanelPresets.getWidth(), jPanelPresets.getHeight()));
            addMouseListener(this);
        }
        
        public void paintComponent(Graphics g) {
            for (int i=0; i < presetArray.length; i++) {
                g.setColor(presetArray[i]);
                g.fillRect(i * 12, 0, 10, 10);
            }
        }
        
        // <editor-fold defaultstate="collapsed" desc=" Interface MouseListener ">
        
        public void mouseClicked(MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                Point pt = e.getPoint();
                int index = pt.x / 12;            
                if (index < presetArray.length)
                    setCurrentColor(presetArray[index]);
            } else if (e.getButton() == MouseEvent.BUTTON3) {
                Point pt = e.getPoint();
                int index = pt.x / 12;            
                if (index < presetArray.length) {
                    Color cPick = JColorChooser.showDialog(this, "Get Color", presetArray[index]);
                    if (cPick != null)
                        updatePresetColor(index, cPick);
                }
            }
        }
        
        public void mousePressed(MouseEvent e) {
            
        }
        
        public void mouseReleased(MouseEvent e) {
            
        }
        
        public void mouseEntered(MouseEvent e) {
            
        }
        
        public void mouseExited(MouseEvent e) {
            
        }
        
        // </editor-fold>
        
    }
    
    // </editor-fold>
            
    // <editor-fold defaultstate="collapsed" desc=" Class ColorPicker ">
    
    class ColorPicker extends JComponent implements MouseMotionListener, MouseListener {
        Color colorTable[][];
        int COLORTABLE_WIDTH = 125;
        int COLORTABLE_HEIGHT = 200;
        ColorPicker() {
            setPreferredSize(new Dimension(COLORTABLE_WIDTH, jPanelColorArray.getHeight()));
            createColorTable();
            addMouseMotionListener(this);
            addMouseListener(this);
        }
        
        private void createColorTable() {            
            colorTable = new Color[COLORTABLE_HEIGHT][COLORTABLE_WIDTH];
                        
            int phaseHeight = COLORTABLE_HEIGHT / 6;
            float phaseDeltas = 1.0f / phaseHeight;
            int pureColorStart = COLORTABLE_WIDTH / 2;
            float pureColorDeltas = 1.0f / pureColorStart;
            
            float red=0.0f, blue=0.0f, green=0.0f;
            
            
            // from red 1.0f, to red 1.0f and green 1.0f
            for (int phase=0; phase < 6; phase++) {
                for (int yPos=0; yPos < phaseHeight; yPos++) {
                    for (int xPos=0; xPos < COLORTABLE_WIDTH; xPos++) {
                        if (phase == 0) {
                            red = 1.0f;
                            blue = 0.0f;
                            green = phaseDeltas * yPos;
                        } else if (phase == 1) {
                            red = 1.0f -phaseDeltas * yPos;
                            blue = 0.0f;
                            green = 1.0f;
                        } else if (phase == 2) {
                            red = 0.0f;
                            blue = phaseDeltas * yPos;
                            green = 1.0f;
                        } else if (phase == 3) {
                            red = 0.0f;
                            blue = 1.0f;
                            green = 1.0f - phaseDeltas * yPos;
                        } else if (phase == 4) {
                            red = phaseDeltas * yPos;
                            blue = 1.0f;
                            green = 0.0f;
                        } else if (phase == 5) {
                            red = 1.0f;
                            blue = 1.0f - phaseDeltas * yPos;
                            green = 0.0f;
                        }
                        
                        
                        if (xPos < pureColorStart) {
                            red *= pureColorDeltas * xPos;
                            green *= pureColorDeltas * xPos;
                            blue *= pureColorDeltas * xPos;
                        } else {
                            red += pureColorDeltas * 1.0f * (xPos - pureColorStart);
                            green += pureColorDeltas * 1.0f * (xPos - pureColorStart);
                            blue  += pureColorDeltas * 1.0f * (xPos - pureColorStart);
                        }
                        
                        if (red > 1.0f)
                            red = 1.0f;
                        if (green > 1.0f)
                            green = 1.0f;
                        if (blue > 1.0f)
                            blue = 1.0f;
                        
                        colorTable[yPos+(phaseHeight*phase)][xPos] = new Color(red, green, blue);
                    }
                }
            }
            
        }
        
        public void paintComponent(Graphics g) {
            int centerX = (getWidth() / 2) - (COLORTABLE_WIDTH / 2);
            for (int yPos=0; yPos < COLORTABLE_HEIGHT; yPos++) {
                for (int xPos=0; xPos < COLORTABLE_WIDTH; xPos++) {
                    g.setColor(colorTable[yPos][xPos]);
                    g.fillRect(xPos + centerX, yPos, 1, 1);
                }
            }
        }
                    
        // <editor-fold defaultstate="collapsed" desc=" Interface MouseMotionListener ">
        
        public void mouseDragged(MouseEvent e) {
            int offsetX = (getWidth() - COLORTABLE_WIDTH) / 2;
            Point pt = e.getPoint();
            pt.x -= offsetX;
            if (pt.x >= 0 && pt.x < COLORTABLE_WIDTH && pt.y >= 0 && pt.y < COLORTABLE_HEIGHT && colorTable[pt.y][pt.x] != null)
                setCurrentColor(colorTable[pt.y][pt.x]);
        }

        public void mouseMoved(MouseEvent e) {
        }
        
        // </editor-fold>        
        
        // <editor-fold defaultstate="collapsed" desc=" Interface MouseListener ">
        
        public void mouseClicked(MouseEvent e) {
        }
        
        public void mousePressed(MouseEvent e) {
            
        }
        
        public void mouseReleased(MouseEvent e) {
            int offsetX = (getWidth() - COLORTABLE_WIDTH) / 2;
            Point pt = e.getPoint();
            pt.x -= offsetX;
            if (pt.x >= 0 && pt.x < COLORTABLE_WIDTH && pt.y >= 0 && pt.y < COLORTABLE_HEIGHT && colorTable[pt.y][pt.x] != null)
                setCurrentColor(colorTable[pt.y][pt.x]);
            
        }
        
        public void mouseEntered(MouseEvent e) {
            
        }
        
        public void mouseExited(MouseEvent e) {
            
        }
        
        // </editor-fold>
        
    }
    
    // </editor-fold>
            
    // <editor-fold defaultstate="collapsed" desc=" Class ColorPreview ">
    
    class ColorPreview extends JComponent {
        ColorPreview() {
            setPreferredSize(new Dimension(jPanelPreviewColor.getWidth(), jPanelPreviewColor.getHeight()));
        }
        
        public void paintComponent(Graphics g) {
            g.setColor(currColor);
            g.fillRect(getX(), getY(), getWidth(), getHeight());
        }
    }
    
    // </editor-fold>
    
}


// <editor-fold defaultstate="collapsed" desc=" class VertexSettings ">

/** This will save the vertex settings
 */
class PresetColorSettings implements InterfaceSettings {
    static private String PRESETCOLOR = "PresetColor";  // Color

    public PresetColorSettings() {        
    }
    
    public void save() {
        Preferences prefs = Preferences.userNodeForPackage(mlnr.embd.Version.getVersion());
        
        // Save each color.
        for (int i=0; i < ColorPanel.PRESETCOLOR_SIZE; i++)
            ColorSave.saveColor(prefs, PRESETCOLOR + i, ColorPanel.presetArray[i]);
    }
    
    public void load() {
        Preferences prefs = Preferences.userNodeForPackage(mlnr.embd.Version.getVersion());
        
        // Load each color.
        for (int i=0; i < ColorPanel.PRESETCOLOR_SIZE; i++)
            ColorPanel.presetArray[i] = ColorSave.loadColor(prefs, PRESETCOLOR + i, ColorPanel.presetArray[i]);        
    }
}

// </editor-fold>
